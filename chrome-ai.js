// libs/chrome-ai.js - V4 (G√©n√©ration et Correction avec Simulation de Secours)

/**
 * V√©rifie si la Chrome Prompt API (window.ai) est disponible.
 */
function isAIAvailable() {
    return typeof window.ai !== 'undefined';
}

/**
 * G√©n√®re du contenu textuel en utilisant l'API Chrome AI, ou simule si indisponible.
 */
async function generateContent(prompt) {
    if (isAIAvailable() && typeof window.ai.prompt !== 'undefined') {
        // --- TENTATIVE D'APPEL DE L'IA R√âELLE (Avec v√©rification avanc√©e) ---
        try {
            const availabilityStatus = await window.ai.prompt.availability();
            
            if (availabilityStatus === "available") {
                const response = await window.ai.prompt.generateText({ prompt: prompt });
                if (response && response.text) {
                    return response.text.trim();
                }
            } else {
                throw new Error("Mod√®le IA non pr√™t. Statut: " + availabilityStatus);
            }
        } catch (error) {
            // √âchec d'ex√©cution de l'IA. On passe √† la simulation.
            console.error("√âchec de l'IA r√©elle. Raison:", error.message);
        }
    }
    
    // --- PLAN B : MODE SIMULATION (SECOURS OBLIGATOIRE POUR LA D√âMO) ---
    
    // Extraction des variables du prompt (inchang√©)
	const sujetMatch = prompt.match(/Sujet:\s*"(.*?)"/);
	const plateformeMatch = prompt.match(/Plateforme cibl√©e:\s*(\w+)/);
	const tonMatch = prompt.match(/Ton souhait√©:\s*(\w+)/);

	const sujet = sujetMatch ? sujetMatch[1].trim() : "la performance de notre nouveau service";
	const plateforme = plateformeMatch ? plateformeMatch[1].trim() : "LinkedIn";
	const ton = tonMatch ? tonMatch[1].trim() : "professionnel";

	let postContent = "";
	let hashtags = "";
	let callToAction = "";
	let introEmoji = "";

	// -----------------------------------------------------
	// NOUVEAU : Adaptation stylistique bas√©e sur la plateforme
	// -----------------------------------------------------

	if (plateforme.toLowerCase() === 'linkedin') {
		// Style LinkedIn : Ton professionnel, phrases claires [cite: 23]
		introEmoji = "üíº";
		postContent = `Bonjour √† tous. C'est avec une grande fiert√© que nous vous partageons une mise √† jour importante concernant **${sujet}**. Notre √©quipe a travaill√© sans rel√¢che pour optimiser les performances et la clart√©. L'impact est d√©j√† mesurable : nous observons une am√©lioration de üìà 25% de l'efficacit√© pour nos premiers utilisateurs.`;
		callToAction = "D√©couvrez d√®s maintenant les d√©tails complets sur notre page et partagez vos impressions !";
		hashtags = "#Innovation #Professionnel #Productivit√© #AIWriter";
	} else if (plateforme.toLowerCase() === 'twitter') {
		// Style Twitter/X : Format court, percutant, hashtags directs [cite: 23]
		introEmoji = "üî•";
		postContent = `üö® Alerte ! Fini les soucis de ${sujet.toLowerCase()} ! Notre solution est l√†. C'est rapide, c'est efficace, et √ßa tient en 280 caract√®res. Test√© et approuv√© par les pros. Qu'attendez-vous ?`;
		callToAction = "RT si vous aimez la vitesse ! Cliquez ci-dessous pour l'essayer.";
		hashtags = "#Tech #X #FastSolution #Hackathon";
	} else if (plateforme.toLowerCase() === 'instagram') {
		// Style Instagram : Ton visuel, hashtags √©motionnels [cite: 23]
		introEmoji = "‚ú®";
		postContent = `Wow ! C'est ce que vous allez dire apr√®s avoir vu **${sujet}** en action. Derri√®re chaque succ√®s, il y a du travail acharn√©, et ce r√©sultat en vaut la peine ! üíñ N'oubliez pas de mettre un c≈ìur si cela vous inspire.`;
		callToAction = "Lien en bio pour ne rien manquer ! üëÜ";
		hashtags = "#Inspiration #VisualGoals #Cr√©ationDeContenu #InnovationIA";
	} else if (plateforme.toLowerCase() === 'whatsapp') {
		// Style WhatsApp : Ton conversationnel, direct, emojis [cite: 23]
		introEmoji = "üí¨";
		postContent = `Salut l'√©quipe ! üëã Juste un petit message rapide concernant **${sujet}**. C'est op√©rationnel et √ßa marche du tonnerre. Pas besoin de longues explications, le r√©sultat parle de lui-m√™me.`;
		callToAction = "On en discute juste apr√®s ce message. üó£Ô∏è";
		hashtags = "#QuickUpdate #TeamWork #WhatsApp";
	}

	// -----------------------------------------------------
	// NOUVEAU : Adaptation stylistique bas√©e sur le ton
	// -----------------------------------------------------

	// Nous ajustons l'emoji principal en fonction du ton, en plus de l'adaptation par plateforme
	if (ton.toLowerCase() === 'humoristique') {
		introEmoji = "ü§£";
		postContent += "\n\n(Note : Attention, l'IA a ajout√© une petite blague sur la fin, ne la ratez pas ! üòâ)";
		callToAction = "Partagez la blague du jour ! üòÇ";
	} else if (ton.toLowerCase() === 'inspirant') {
		introEmoji = "üåü";
		postContent = postContent.replace("Bonjour √† tous.", "Bonjour √† tous. Votre succ√®s commence ici.");
		callToAction = "Inspirez le changement. Lisez ceci et agissez ! üöÄ";
	}


	// Construction du message final (format√© pour le champ de texte)
	const simulatedText = `${introEmoji} ${postContent}

	${callToAction}

	${hashtags}

	---
	*G√©n√©r√© par AI Writer Chrome (Mode Simulation pour la d√©mo)*`;
		
	return simulatedText.trim();
 }
	



// ----------------------------------------------------------------------
// NOUVELLE FONCTION : Correction Grammaticale (Proofreader API)
// ----------------------------------------------------------------------

/**
 * Corrige le texte en utilisant l'API Proofreader ou simule la correction.
 * @param {string} text Le texte √† corriger.
 * @returns {Promise<string>} Le texte corrig√©.
 */
async function proofreadContent(text) {
    if (isAIAvailable() && typeof window.ai.proofreader !== 'undefined') {
        // --- TENTATIVE D'APPEL DE L'API R√âELLE (Proofreader API) ---
        try {
            const result = await window.ai.proofreader.proofread({ text: text });
            if (result && result.proofreadText) {
                return result.proofreadText.trim();
            }
        } catch (error) {
            console.error("√âchec de l'API Proofreader, utilisation de la simulation.", error.message);
        }
    }
    
    // --- MODE SIMULATION DE LA CORRECTION (Plan de Secours) ---

    let correctedText = text;
    
    // Simuler une correction en ajoutant une marque pour la d√©monstration
    if (correctedText.includes("[Message g√©n√©r√© par le Partenaire de code")) {
        // Ajouter une ligne pour indiquer la correction simul√©e sans modifier le texte
        correctedText = correctedText.replace('---', '--- \n‚úÖ Correction grammaticale simul√©e (Proofreader API pass√©e).');
    }

    // Le corps du message r√©el est utilis√©.

    return correctedText;
}